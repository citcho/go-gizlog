// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_report is a generated GoMock package.
package mock_report

import (
	context "context"
	reflect "reflect"

	report "github.com/citcho/go-gizlog/internal/report/domain/report"
	gomock "github.com/golang/mock/gomock"
)

// MockIReportRepository is a mock of IReportRepository interface.
type MockIReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIReportRepositoryMockRecorder
}

// MockIReportRepositoryMockRecorder is the mock recorder for MockIReportRepository.
type MockIReportRepositoryMockRecorder struct {
	mock *MockIReportRepository
}

// NewMockIReportRepository creates a new mock instance.
func NewMockIReportRepository(ctrl *gomock.Controller) *MockIReportRepository {
	mock := &MockIReportRepository{ctrl: ctrl}
	mock.recorder = &MockIReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReportRepository) EXPECT() *MockIReportRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIReportRepository) Exists(arg0 context.Context, arg1 *report.Report) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIReportRepositoryMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIReportRepository)(nil).Exists), arg0, arg1)
}
